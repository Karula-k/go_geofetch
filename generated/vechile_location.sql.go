// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: vechile_location.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createVehicleLocation = `-- name: CreateVehicleLocation :one
INSERT INTO vehicle_location(
  vehicle_id,
  latitude,
  longitude,
  timestamp
) VALUES (
  $1, $2, $3, $4
)RETURNING id, vehicle_id, latitude, longitude, timestamp
`

type CreateVehicleLocationParams struct {
	VehicleID string  `json:"vehicle_id"`
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
	Timestamp int64   `json:"timestamp"`
}

func (q *Queries) CreateVehicleLocation(ctx context.Context, arg CreateVehicleLocationParams) (VehicleLocation, error) {
	row := q.db.QueryRow(ctx, createVehicleLocation,
		arg.VehicleID,
		arg.Latitude,
		arg.Longitude,
		arg.Timestamp,
	)
	var i VehicleLocation
	err := row.Scan(
		&i.ID,
		&i.VehicleID,
		&i.Latitude,
		&i.Longitude,
		&i.Timestamp,
	)
	return i, err
}

const deleteVehicleLocation = `-- name: DeleteVehicleLocation :exec
DELETE FROM vehicle_location
WHERE id = $1
`

func (q *Queries) DeleteVehicleLocation(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteVehicleLocation, id)
	return err
}

const getVehicleHistory = `-- name: GetVehicleHistory :many
SELECT id, vehicle_id, latitude, longitude, timestamp FROM vehicle_location
WHERE vehicle_id = $1
AND ($2::BIGINT IS NULL OR timestamp >= $2)
AND ($3::BIGINT IS NULL OR timestamp <= $3)
ORDER BY timestamp DESC
`

type GetVehicleHistoryParams struct {
	VehicleID string      `json:"vehicle_id"`
	StartDate pgtype.Int8 `json:"start_date"`
	EndDate   pgtype.Int8 `json:"end_date"`
}

func (q *Queries) GetVehicleHistory(ctx context.Context, arg GetVehicleHistoryParams) ([]VehicleLocation, error) {
	rows, err := q.db.Query(ctx, getVehicleHistory, arg.VehicleID, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VehicleLocation
	for rows.Next() {
		var i VehicleLocation
		if err := rows.Scan(
			&i.ID,
			&i.VehicleID,
			&i.Latitude,
			&i.Longitude,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVehicleLocation = `-- name: GetVehicleLocation :one
SELECT id, vehicle_id, latitude, longitude, timestamp FROM vehicle_location
WHERE vehicle_id = $1
ORDER BY id DESC, timestamp DESC
LIMIT 1
`

func (q *Queries) GetVehicleLocation(ctx context.Context, vehicleID string) (VehicleLocation, error) {
	row := q.db.QueryRow(ctx, getVehicleLocation, vehicleID)
	var i VehicleLocation
	err := row.Scan(
		&i.ID,
		&i.VehicleID,
		&i.Latitude,
		&i.Longitude,
		&i.Timestamp,
	)
	return i, err
}

const listVehicleLocation = `-- name: ListVehicleLocation :many
SELECT id, vehicle_id, latitude, longitude, timestamp FROM vehicle_location
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListVehicleLocationParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListVehicleLocation(ctx context.Context, arg ListVehicleLocationParams) ([]VehicleLocation, error) {
	rows, err := q.db.Query(ctx, listVehicleLocation, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VehicleLocation
	for rows.Next() {
		var i VehicleLocation
		if err := rows.Scan(
			&i.ID,
			&i.VehicleID,
			&i.Latitude,
			&i.Longitude,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVehicleLocation = `-- name: UpdateVehicleLocation :exec
UPDATE vehicle_location
SET vehicle_id = $2,
    latitude = $3,
    longitude = $4,
    timestamp = $5
WHERE id =$1
`

type UpdateVehicleLocationParams struct {
	ID        int64   `json:"id"`
	VehicleID string  `json:"vehicle_id"`
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
	Timestamp int64   `json:"timestamp"`
}

func (q *Queries) UpdateVehicleLocation(ctx context.Context, arg UpdateVehicleLocationParams) error {
	_, err := q.db.Exec(ctx, updateVehicleLocation,
		arg.ID,
		arg.VehicleID,
		arg.Latitude,
		arg.Longitude,
		arg.Timestamp,
	)
	return err
}
