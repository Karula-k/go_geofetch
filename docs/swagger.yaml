definitions:
  generated.VehicleLocation:
    properties:
      id:
        type: integer
      latitude:
        type: number
      longitude:
        type: number
      timestamp:
        type: integer
      vehicle_id:
        type: string
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
        x-order: "1"
      username:
        type: string
        x-order: "0"
    required:
    - password
    - username
    type: object
  models.RefreshTokenRequest:
    properties:
      refreshToken:
        type: string
    type: object
  models.RegisterRequest:
    properties:
      password:
        type: string
        x-order: "1"
      username:
        type: string
        x-order: "0"
    required:
    - password
    - username
    type: object
  models.VehiclesDummyRequest:
    properties:
      latitude:
        type: number
      longitude:
        type: number
      timestamp:
        type: integer
      vehicle_id:
        type: string
    type: object
info:
  contact: {}
  description: This is an Geo Fetch and Geo Fencing for Backend
  termsOfService: http://swagger.io/terms/
  title: GeoFetch API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login by username and password
      parameters:
      - description: login body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
        x-order: "1"
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Login
      tags:
      - Auth
  /auth/refresh_token:
    post:
      consumes:
      - application/json
      description: refresh token by body
      parameters:
      - description: refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Refresh Token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: register by username and password
      parameters:
      - description: login body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
        x-order: "1"
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: register
      tags:
      - Auth
  /vehicles/{vehicle_id}/history:
    get:
      consumes:
      - application/json
      description: Queries the database for the location history of a vehicle
      parameters:
      - description: Vehicle ID
        in: path
        name: vehicle_id
        required: true
        type: string
      - description: Start timestamp (Unix timestamp)
        in: query
        name: start
        type: integer
      - description: End timestamp (Unix timestamp)
        in: query
        name: end
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/generated.VehicleLocation'
            type: array
      summary: Retrieve vehicle location history
      tags:
      - Vehicle
  /vehicles/{vehicle_id}/location:
    get:
      consumes:
      - application/json
      description: Queries the database for the latest location of a vehicle
      parameters:
      - description: Vehicle ID
        in: path
        name: vehicle_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/generated.VehicleLocation'
      summary: Retrieve latest vehicle location
      tags:
      - Vehicle
  /vehicles/dummy:
    post:
      consumes:
      - application/json
      description: Receives a request, creates a dummy vehicle location, and publishes
        it to MQTT
      parameters:
      - description: Dummy vehicle location data
        in: body
        name: request
        schema:
          $ref: '#/definitions/models.VehiclesDummyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Vehicle location published
          schema:
            type: string
      summary: Simulate vehicle location update
      tags:
      - Vehicle
swagger: "2.0"
